#!/bin/bash

set -evx

cd /tmp/rom # Depends on where source got synced

# Normal build steps
. build/envsetup.sh
lunch aosp_RMX1941-userdebug
chmod -R 755 out/

export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1

ccache -M 30G # It took only 6.4GB for mido
ccache -o compression=true # Will save times and data to download and upload ccache, also negligible performance issue
ccache -z # Clear old stats, so monitor script will provide real ccache statistics

## Next 8 lines should be run first to collect ccache and then upload, after doning it 1 or 2 times, our ccache will help to build without these 8 lines.
mka bacon -j$(nproc --all) & # dont remove that '&'
sleep 50m
kill %1
ccache -s
#and dont use below codes for first 1 or 2 times, to get ccache uploaded,


# upload function for uploading rom zip file! I don't want unwanted builds in my google drive haha!
#up(){
#	curl --upload-file $1 https://transfer.sh/$(basename $1); echo
#	# 14 days, 10 GB limit
#}

# It's recommended to use google drive(rclone) as upload solution for coping with the time limit. Un-comment next 3 lines to upload with rclone in drive. Also change apon and junk according to your config name, uploading folder of drive
up(){
	time rclone copy $1 aosp:ccache/ccache-ci -P # apon is my rclone config name, 
}


# Let's compile by parts! Coz of ram issue!
#make api-stubs-docs || echo no problem
#make system-api-stubs-docs || echo no problem
#make test-api-stubs-docs || echo no problem

#mka bacon -j$(nproc --all) \
#	&& send_zip=$(up out/target/product/RMX1941/*zip) && tg $id "Build Succeed!

ccache -s
